# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IFbhP2i_yqWUkE9847pIhUJ7Kirm2h64
"""

import requests
from bs4 import BeautifulSoup
import re

def extract_phone_numbers(text):
    # Define a regular expression pattern for potential phone number matches
    phone_number_pattern = r'(\+\d{1,3}[-.\s]?)?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,4}'

    # Find all matching phone numbers in the text
    phone_numbers = re.findall(phone_number_pattern, text)

    return phone_numbers

def is_valid_phone_number(phone_number):
    # Remove non-digit characters from the phone number
    digits_only = re.sub(r'\D', '', phone_number)

    # Check if the digits-only number has between 10 and 15 digits (common phone number lengths)
    return 10 <= len(digits_only) <= 15

def get_social_links_email_contacts(url):
    try:
        # Send a GET request to the website
        response = requests.get(url)
        response.raise_for_status()

        # Parse the HTML content of the page
        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract social links from anchor tags containing 'facebook', 'linkedin', etc.
        social_links = []
        for anchor in soup.find_all('a', href=True):
            href = anchor['href']
            if re.search(r'facebook|linkedin|twitter', href, re.IGNORECASE):
                social_links.append(href)

        # Extract email addresses using a regular expression pattern
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'
        emails = re.findall(email_pattern, response.text)

        # Extract potential phone numbers
        phone_numbers = extract_phone_numbers(response.text)

        # Validate and print the extracted information
        print("Social links -")
        for link in social_links:
            print(link)

        print("Email:")
        for email in emails:
            print(email)

        valid_phone_number_found = False
        for phone_number in phone_numbers:
            if is_valid_phone_number(phone_number):
                print("Contact:")
                print(phone_number)
                valid_phone_number_found = True

        if not valid_phone_number_found:
            print("Contact: No valid phone number found.")

    except requests.exceptions.RequestException as e:
        print("Error: Unable to fetch the web page.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Input from the user
url = input("Enter a website URL: ")

# Call the function to extract information
get_social_links_email_contacts(url)